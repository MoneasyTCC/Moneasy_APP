{"ast":null,"code":"import _asyncToGenerator from \"@babel/runtime/helpers/asyncToGenerator\";\nimport { TransacaoDAL } from \"../Repo/Transacao\";\nimport { getCurrentUserId } from \"../services/firebase-auth\";\nimport { Transacao } from \"../shared/Model/Transacao\";\nexport var adicionarNovaTransacao = function () {\n  var _ref = _asyncToGenerator(function* () {\n    try {\n      var usuarioId = yield getCurrentUserId();\n      if (usuarioId) {\n        var novaTransacao = new Transacao(usuarioId, 'despesa', 150.00, new Date(), 'Compra de material de escritório', 'BRL');\n        var id = yield TransacaoDAL.adicionarTransacao(novaTransacao);\n        console.log(`Transação adicionada com sucesso. ID: ${id}`);\n      } else {\n        console.log('Usuário não está autenticado.');\n      }\n    } catch (error) {\n      console.error('Erro ao adicionar a transação:', error);\n    }\n  });\n  return function adicionarNovaTransacao() {\n    return _ref.apply(this, arguments);\n  };\n}();","map":{"version":3,"names":["TransacaoDAL","getCurrentUserId","Transacao","adicionarNovaTransacao","_ref","_asyncToGenerator","usuarioId","novaTransacao","Date","id","adicionarTransacao","console","log","error","apply","arguments"],"sources":["D:/APP_Financeiro/services/testeBanco.ts"],"sourcesContent":["\r\nimport { TransacaoDAL } from '../Repo/Transacao';\r\n\r\nimport { getCurrentUserId } from '../services/firebase-auth';\r\nimport { Transacao } from '../shared/Model/Transacao';\r\n// Supondo que você já esteja dentro de um componente ou função onde o usuário está autenticado\r\n// Supondo que você já esteja dentro de um componente ou função onde o usuário está autenticado\r\n\r\n// A função adicionarNovaTransacao precisa ser assíncrona para usar await\r\n// A função adicionarNovaTransacao precisa ser assíncrona para usar await\r\n// Esta função deve ser assíncrona, pois depende de uma chamada assíncrona para getCurrentUserId\r\nexport const adicionarNovaTransacao = async () => {\r\n    try {\r\n      // Espera pela resolução da Promise retornada por getCurrentUserId\r\n      const usuarioId = await getCurrentUserId();\r\n      \r\n      if (usuarioId) {\r\n        // Se temos um usuário autenticado, criamos a nova transação\r\n        const novaTransacao = new Transacao(usuarioId, 'despesa', 150.00, new Date(), 'Compra de material de escritório', 'BRL');\r\n        \r\n        // Agora podemos adicionar a transação ao banco de dados\r\n        const id = await TransacaoDAL.adicionarTransacao(novaTransacao);\r\n        console.log(`Transação adicionada com sucesso. ID: ${id}`);\r\n      } else {\r\n        console.log('Usuário não está autenticado.');\r\n      }\r\n    } catch (error) {\r\n      console.error('Erro ao adicionar a transação:', error);\r\n    }\r\n  };\r\n\r\n// Chame esta função onde faz sentido no seu aplicativo, \r\n// após a autenticação do usuário e quando você quiser testar a inserção\r\n\r\n\r\n"],"mappings":";AACA,SAASA,YAAY;AAErB,SAASC,gBAAgB;AACzB,SAASC,SAAS;AAOlB,OAAO,IAAMC,sBAAsB;EAAA,IAAAC,IAAA,GAAAC,iBAAA,CAAG,aAAY;IAC9C,IAAI;MAEF,IAAMC,SAAS,SAASL,gBAAgB,CAAC,CAAC;MAE1C,IAAIK,SAAS,EAAE;QAEb,IAAMC,aAAa,GAAG,IAAIL,SAAS,CAACI,SAAS,EAAE,SAAS,EAAE,MAAM,EAAE,IAAIE,IAAI,CAAC,CAAC,EAAE,kCAAkC,EAAE,KAAK,CAAC;QAGxH,IAAMC,EAAE,SAAST,YAAY,CAACU,kBAAkB,CAACH,aAAa,CAAC;QAC/DI,OAAO,CAACC,GAAG,CAAE,yCAAwCH,EAAG,EAAC,CAAC;MAC5D,CAAC,MAAM;QACLE,OAAO,CAACC,GAAG,CAAC,+BAA+B,CAAC;MAC9C;IACF,CAAC,CAAC,OAAOC,KAAK,EAAE;MACdF,OAAO,CAACE,KAAK,CAAC,gCAAgC,EAAEA,KAAK,CAAC;IACxD;EACF,CAAC;EAAA,gBAlBUV,sBAAsBA,CAAA;IAAA,OAAAC,IAAA,CAAAU,KAAA,OAAAC,SAAA;EAAA;AAAA,GAkBhC"},"metadata":{},"sourceType":"module","externalDependencies":[]}