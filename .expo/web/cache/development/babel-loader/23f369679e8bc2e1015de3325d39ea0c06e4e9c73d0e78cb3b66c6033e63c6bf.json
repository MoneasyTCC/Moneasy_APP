{"ast":null,"code":"import _defineProperty from \"@babel/runtime/helpers/defineProperty\";\nimport _asyncToGenerator from \"@babel/runtime/helpers/asyncToGenerator\";\nfunction ownKeys(e, r) { var t = Object.keys(e); if (Object.getOwnPropertySymbols) { var o = Object.getOwnPropertySymbols(e); r && (o = o.filter(function (r) { return Object.getOwnPropertyDescriptor(e, r).enumerable; })), t.push.apply(t, o); } return t; }\nfunction _objectSpread(e) { for (var r = 1; r < arguments.length; r++) { var t = null != arguments[r] ? arguments[r] : {}; r % 2 ? ownKeys(Object(t), !0).forEach(function (r) { _defineProperty(e, r, t[r]); }) : Object.getOwnPropertyDescriptors ? Object.defineProperties(e, Object.getOwnPropertyDescriptors(t)) : ownKeys(Object(t)).forEach(function (r) { Object.defineProperty(e, r, Object.getOwnPropertyDescriptor(t, r)); }); } return e; }\nimport { getFirestore, collection, addDoc, Timestamp, query, where, getDocs, updateDoc, deleteDoc, doc } from \"firebase/firestore\";\nimport { getCurrentUserId } from \"../services/firebase-auth\";\nvar db = getFirestore();\nexport var TransacaoDAL = {\n  adicionarTransacao: function () {\n    var _adicionarTransacao = _asyncToGenerator(function* (novaTransacao) {\n      var usuarioId = yield getCurrentUserId();\n      if (!usuarioId) throw new Error(\"Usuário não autenticado.\");\n      try {\n        var docRef = yield addDoc(collection(db, 'transacoes'), _objectSpread(_objectSpread({}, novaTransacao), {}, {\n          usuarioId: usuarioId,\n          data: Timestamp.fromDate(novaTransacao.data)\n        }));\n        var transacaoId = docRef.id;\n        yield updateDoc(doc(db, 'transacoes', transacaoId), {\n          id: transacaoId\n        });\n        console.log(\"Transação adicionada com ID: \", transacaoId);\n        return transacaoId;\n      } catch (error) {\n        if (error instanceof Error) {\n          throw new Error(`Erro ao adicionar transação: ${error.message}`);\n        } else {\n          throw new Error('Ocorreu um erro ao adicionar transação.');\n        }\n      }\n    });\n    function adicionarTransacao(_x) {\n      return _adicionarTransacao.apply(this, arguments);\n    }\n    return adicionarTransacao;\n  }(),\n  buscarTransacoes: function () {\n    var _buscarTransacoes = _asyncToGenerator(function* () {\n      var usuarioIdatual = yield getCurrentUserId();\n      if (!usuarioIdatual) throw new Error(\"Usuário não autenticado.\");\n      console.log(usuarioIdatual);\n      try {\n        var q = query(collection(db, 'transacoes'), where(\"usuarioId\", \"==\", usuarioIdatual));\n        var querySnapshot = yield getDocs(q);\n        var transacoes = querySnapshot.docs.map(function (doc) {\n          return _objectSpread({\n            id: doc.id\n          }, doc.data());\n        });\n        console.log(transacoes);\n        return transacoes;\n      } catch (error) {\n        if (error instanceof Error) {\n          throw new Error(`Erro ao buscar transações: ${error.message}`);\n        } else {\n          throw new Error('Ocorreu um erro ao buscar transações.');\n        }\n      }\n    });\n    function buscarTransacoes() {\n      return _buscarTransacoes.apply(this, arguments);\n    }\n    return buscarTransacoes;\n  }(),\n  deletarTransacao: function () {\n    var _deletarTransacao = _asyncToGenerator(function* (transacaoId) {\n      try {\n        yield deleteDoc(doc(db, 'transacoes', transacaoId));\n        console.log(\"Transação deletada com sucesso.\");\n      } catch (error) {\n        if (error instanceof Error) {\n          throw new Error(`Erro ao deletar transação: ${error.message}`);\n        } else {\n          throw new Error('Ocorreu um erro ao deletar transação.');\n        }\n      }\n    });\n    function deletarTransacao(_x2) {\n      return _deletarTransacao.apply(this, arguments);\n    }\n    return deletarTransacao;\n  }(),\n  alterarTransacao: function () {\n    var _alterarTransacao = _asyncToGenerator(function* (transacaoId, novosDados) {\n      try {\n        var transacaoRef = doc(db, 'transacoes', transacaoId);\n        yield updateDoc(transacaoRef, novosDados);\n        console.log(\"Transação atualizada com sucesso.\");\n      } catch (error) {\n        if (error instanceof Error) {\n          throw new Error(`Erro ao atualizar transação: ${error.message}`);\n        } else {\n          throw new Error('Ocorreu um erro  ao atualizar transação.');\n        }\n      }\n    });\n    function alterarTransacao(_x3, _x4) {\n      return _alterarTransacao.apply(this, arguments);\n    }\n    return alterarTransacao;\n  }()\n};","map":{"version":3,"names":["getFirestore","collection","addDoc","Timestamp","query","where","getDocs","updateDoc","deleteDoc","doc","getCurrentUserId","db","TransacaoDAL","adicionarTransacao","_adicionarTransacao","_asyncToGenerator","novaTransacao","usuarioId","Error","docRef","_objectSpread","data","fromDate","transacaoId","id","console","log","error","message","_x","apply","arguments","buscarTransacoes","_buscarTransacoes","usuarioIdatual","q","querySnapshot","transacoes","docs","map","deletarTransacao","_deletarTransacao","_x2","alterarTransacao","_alterarTransacao","novosDados","transacaoRef","_x3","_x4"],"sources":["D:/APP_Financeiro/Repo/RepositorioTransacao.ts"],"sourcesContent":["import { \r\n    getFirestore, \r\n    collection, \r\n    addDoc, \r\n    Timestamp,\r\n    query, \r\n    where, \r\n    getDocs, \r\n    updateDoc, \r\n    deleteDoc, \r\n    doc \r\n  } from \"firebase/firestore\";\r\n  \r\n  import { Transacao } from \"../Model/Transacao\";\r\n\r\n  import { getCurrentUserId } from \"../services/firebase-auth\";\r\n\r\n  const db = getFirestore();\r\n  \r\n  export const TransacaoDAL = {\r\n    // Função para adicionar uma nova transação\r\n   adicionarTransacao: async (novaTransacao: Transacao) => {\r\n    const usuarioId = await getCurrentUserId();\r\n  if (!usuarioId) throw new Error(\"Usuário não autenticado.\");\r\n\r\n  try {\r\n    const docRef = await addDoc(collection(db, 'transacoes'), {\r\n      ...novaTransacao,\r\n      usuarioId: usuarioId, \r\n      data: Timestamp.fromDate(novaTransacao.data)\r\n    });\r\n    const transacaoId = docRef.id;\r\n\r\n    // Atualiza o campo 'idDocumento' da nova categoria com o ID do documento\r\n    await updateDoc(doc(db, 'transacoes', transacaoId), {\r\n        id: transacaoId,\r\n    });\r\n\r\n    console.log(\"Transação adicionada com ID: \", transacaoId);\r\n    return transacaoId;\r\n      } catch (error: unknown) {\r\n        if (error instanceof Error) {\r\n          throw new Error(`Erro ao adicionar transação: ${error.message}`);\r\n        } else {\r\n          throw new Error('Ocorreu um erro ao adicionar transação.');\r\n        }\r\n      }\r\n    },\r\n  \r\n    // Função para recuperar todas as transações de um usuário\r\n      buscarTransacoes: async () => {\r\n      const usuarioIdatual = await getCurrentUserId();\r\n      if (!usuarioIdatual) throw new Error(\"Usuário não autenticado.\");\r\n  \r\n      console.log(usuarioIdatual);\r\n      try {\r\n        const q = query(collection(db, 'transacoes'), where(\"usuarioId\", \"==\", usuarioIdatual));\r\n        const querySnapshot = await getDocs(q);\r\n        const transacoes = querySnapshot.docs.map(doc => ({ id: doc.id, ...doc.data() }));\r\n        console.log(transacoes);\r\n        return transacoes;\r\n    \r\n\r\n      } catch (error: unknown) {\r\n        if (error instanceof Error) {\r\n          throw new Error(`Erro ao buscar transações: ${error.message}`);\r\n        } else {\r\n          throw new Error('Ocorreu um erro ao buscar transações.');\r\n        }\r\n      }\r\n    },\r\n  \r\n    // Função para deletar uma transação\r\n    deletarTransacao: async (transacaoId: string) => {\r\n      try {\r\n        await deleteDoc(doc(db, 'transacoes', transacaoId));\r\n        console.log(\"Transação deletada com sucesso.\");\r\n      } catch (error: unknown) {\r\n        if (error instanceof Error) {\r\n          throw new Error(`Erro ao deletar transação: ${error.message}`);\r\n        } else {\r\n          throw new Error('Ocorreu um erro ao deletar transação.');\r\n        }\r\n      }\r\n    },\r\n  \r\n    // Método para alterar uma transação\r\n    alterarTransacao: async (transacaoId: string, novosDados: Partial<Transacao>) => {\r\n      try {\r\n        const transacaoRef = doc(db, 'transacoes', transacaoId);\r\n        await updateDoc(transacaoRef, novosDados);\r\n        console.log(\"Transação atualizada com sucesso.\");\r\n      } catch (error: unknown) {\r\n        if (error instanceof Error) {\r\n          throw new Error(`Erro ao atualizar transação: ${error.message}`);\r\n        } else {\r\n          throw new Error('Ocorreu um erro  ao atualizar transação.');\r\n        }\r\n      }\r\n    }\r\n  };\r\n  "],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}